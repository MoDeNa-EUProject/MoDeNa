/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.2                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// CoEuler
// CrankNicolson
// Euler
// SLTS (only steady state)
// backward
// bounded
// localEuler
// steadyState
ddtSchemes
{
    default         Euler;		// first-order
}

gradSchemes
{
    default         Gauss linear;	// sigma(S_f phi_f)
}

divSchemes
{
    div(phi,alpha)  Gauss vanLeer;
    div(phirb,alpha) Gauss interfaceCompression 1;	//alphaEqn.H L7, 58 & look at eq. 4.13 Rusche's PhD

    div(rhoPhi,U)  Gauss upwind;
    div(phi,thermo:rhofoam) Gauss upwind; 
    div(phi,thermo:rhoair) Gauss upwind;
    div(rhoPhi,T)    Gauss upwind; 
    div(rhoPhi,K)    Gauss upwind; 
    div(phi,p)        Gauss upwind;
    div(phi,k)        Gauss upwind;
    div(phi,rho_gas)  Gauss upwind; 
    div(phi,rho_foam) Gauss upwind; 
    div(rhoPhi,TS)    Gauss upwind;
    div(phi,p_rgh)      Gauss upwind;
    div(phi,TS)        Gauss upwind; 
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),TS)   Gauss linear;
    
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),rho)  Gauss linear;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),rho_foam)   Gauss linear;

    div((muEff*dev2(T(grad(U))))) Gauss linear;
    div((muMixture*dev2(T(grad(U))))) Gauss linear;
    div((interpolate(alpha.gas)*phi),rho_gas) Gauss linear;
    div((interpolate(alpha.foam)*phi),rho_foam) Gauss linear;

// For Moments
    div(phi,mZero)   Gauss upwind;
    div(phi,mOne)    Gauss upwind;
    div(phi,mTwo)    Gauss upwind;
    div(phi,mThree)  Gauss upwind;
    div(phi,mFour)   Gauss upwind;	
    div(phi,mFive)   Gauss upwind;

    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mZero)   Gauss upwind;     
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mOne)   Gauss upwind;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mTwo)   Gauss upwind;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mThree)   Gauss upwind;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mFour)   Gauss upwind;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),mFive)   Gauss upwind;

    div((muMixture*dev2(grad(U).T()))) Gauss linear; 
    div((muEff*dev(T(grad(U))))) Gauss linear; 

// For Kinetics
    div(phi,wBA_l)   Gauss upwind;
    div(phi,wBA_g)   Gauss upwind;
    div(phi,wCO2_g)   Gauss upwind;
    div(phi,wCO2_l)   Gauss upwind;
    div(phi,XOH)   Gauss upwind;
    div(phi,XW)   Gauss upwind;

    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),wBA_g)   Gauss upwind;   
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),wBA_l)   Gauss upwind;   
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),wCO2_g)   Gauss upwind;   
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),wCO2_l)   Gauss upwind;
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),XOH)   Gauss upwind;   
    div((interpolate(alpha.gas)*(mag((phi|magSf))*nHatf)),XW)   Gauss upwind;  

    div((((interpolate(alpha2))*rho_foam)*phi),wCO2_l)	Gauss upwind;
    div((((interpolate(alpha2))*rho_foam)*phi),wCO2_g)	Gauss upwind;
    div((((interpolate(alpha2))*rho_foam)*phi),wBA_g)	Gauss upwind;
    div((((interpolate(alpha2))*rho_foam)*phi),wBA_l)	Gauss upwind;
    div((((interpolate(alpha2))*rho_foam)*phi),XOH)	Gauss upwind;
    div((((interpolate(alpha2))*rho_foam)*phi),XW)	Gauss upwind;
  
    div((interpolate(rhoFoamAlpha2)*phi),XW)	Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),XOH)	Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),wBA_l)	Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),wBA_g)	Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),wCO2_l)	Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),wCO2_g)	Gauss upwind;
    
    div((interpolate(rhoFoamAlpha2)*phi),XNCO) Gauss upwind; 

    div((interpolate(rhoFoamAlpha2)*phi),TS)    Gauss upwind;

    // Kinetics surrogate models
    div((interpolate(rhoFoamAlpha2)*phi),Catalyst_1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_A0) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_A1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_B) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_B2) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_I0) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_I1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_I2) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_PBA) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Breac) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Areac0) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Areac1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Ireac0) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Ireac1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),CE_Ireac2) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),Bulk) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),R_1) Gauss upwind;
    div((interpolate(rhoFoamAlpha2)*phi),R_1_temp_RF1) Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         midPoint;		// central differencing
}

snGradSchemes
{
    default         uncorrected;	// corrected option: calculate the surface normal gradient with non-orthogonal correction
}

fluxRequired
{
    default         no;
    alpha.gas;
    p_rgh;
    pcorr;
}

// ************************************************************************* //
