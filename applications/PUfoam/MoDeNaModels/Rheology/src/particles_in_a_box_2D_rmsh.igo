// Make a mesh consisting of a rectangle with particles, all defined by
// a mesh consisting of
//   four points
//   four lines for the box
//   nobj lines/curves for particles
// NOTE: the mesh has to be merged before including this file.
//
// The full rectangle, including the particles, is meshed.
// The space between the particles and the rectangle is physical volume 1
// The space inside the particles is physical volume 2
//
// The input parameters are:
//
//   nobj = the number of particles
//
// NOTE: the parameters have to be defined before including this file.A
//
// The mesh consists of four (Physical) Points and 4+nobj Physical lines

// Create domain vertices

Mesh.CharacteristicLengthExtendFromBoundary=0;
For i In {1:4}
  Point(i) = {x_geo[i],    y_geo[i],    0.0, dx_box};
EndFor

Physical Point(1) = p1;
Physical Point(2) = p2;
Physical Point(3) = p3;
Physical Point(4) = p4;


Physical Line(1) = {1};
Physical Line(2) = {2};
Physical Line(3) = {3};
Physical Line(4) = {4};

//Periodic Line{4} = {-2};

// Create outer boundary

lin_loop[0] = newll;
Line Loop(lin_loop[0]) = { 1, 2, 3, 4 };

// Make nobj particles

For t In {1:nobj}

  lin_loop[t] = newll;

  Line Loop(lin_loop[t]) = {t+4};

  Physical Line(t+4) = {t+4};

EndFor

// Create surface mesh (with holes)

Plane Surface(1) = {lin_loop[]};

Physical Surface(1) = {1};

//For t In {1:nobj}

//  Plane Surface(t+1) = {lin_loop[t]};

//EndFor

//Physical Surface(2) = {2:nobj+1};
// add refinement points

If (nrefine > 0 )

//generate a list with the refinement points
  For t In {1:nrefine}

    p_refine = newp; Point(p_refine) = {xp_refine[t], yp_refine[t], 0.0};

    //apparently, Gmsh start counting with 0, so t-1 is the first index!
    refinement_points[t-1] = p_refine;

  EndFor

//generate an attractor field that returns the distance to the closest
//refinement point

  For t In {1:nrefine}

    Field[2*t-1] = Attractor;
    Field[2*t-1].NodesList = {refinement_points[t-1]};

//use the values generated by the attractor field to determine the element size
    Field[2*t] = Threshold;
    Field[2*t].IField = 2*t-1;
    Field[2*t].LcMin = h_fine[t];
    Field[2*t].LcMax = h_coarse[t];
    Field[2*t].DistMin = d_min[t];
    Field[2*t].DistMax = d_max[t];

    FldList[t-1] = 2*t;

  EndFor

//use the minimum of all element-size-fields to determine the local element size
  Field[2*nrefine+1] = Min;
  Field[2*nrefine+1].FieldsList = {FldList[]};
  Background Field = 2*nrefine+1;

EndIf
// vim: set filetype=gmsh :  //
