#!/usr/bin/python
'''

   ooo        ooooo           oooooooooo.             ooooo      ooo
   `88.       .888'           `888'   `Y8b            `888b.     `8'
    888b     d'888   .ooooo.   888      888  .ooooo.   8 `88b.    8   .oooo.
    8 Y88. .P  888  d88' `88b  888      888 d88' `88b  8   `88b.  8  `P  )88b
    8  `888'   888  888   888  888      888 888ooo888  8     `88b.8   .oP"888
    8    Y     888  888   888  888     d88' 888    .o  8       `888  d8(  888
   o8o        o888o `Y8bod8P' o888bood8P'   `Y8bod8P' o8o        `8  `Y888""8o

Copyright
    2014 MoDeNa Consortium, All rights reserved.

License
    This file is part of Modena.

    Modena is free software; you can redistribute it and/or modify it under
    the terms of the GNU General Public License as published by the Free
    Software Foundation, either version 3 of the License, or (at your option)
    any later version.

    Modena is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with Modena.  If not, see <http://www.gnu.org/licenses/>.

Description
    Initialization of Bubble growth model. Detailed Bubble growth simulation
    must be run first. Results must not be modified.

Authors
    Henrik Rusche
    Pavel Ferkl

Contributors
'''

from pymongo import MongoClient
from numpy import array, loadtxt, ones
from scipy.optimize import leastsq
import modena
from modena import CFunction, ForwardMappingModel, SurrogateModel

global model


def surrModel(params, T, R, kH, c, p):
    inputs = {'T': T, 'R': R, 'kH': kH, 'c': c, 'p': p}
    cModel = modena.libmodena.modena_model_t(
        model=model,
        parameters=list(params)
    )
    i = [0] * model.surrogateFunction.inputs_size()
    for k, v in inputs.iteritems():
        i[model.inputs_argPos(k)] = inputs[k]
    return cModel.call(i, checkBounds=False)[0]

# def surrModel(params, T, R, kH, c, p):
#     alpha=params[0]
#     beta=params[1]
#     gamma=params[2]
#     pi=3.14159265359
#     kl=alpha*R**beta
#     G=4*pi*R*R*kl*(c-kH*p)
#     return G

def residual(params, T, R, kH, c, p, G):
    """
    The residual function for the least squares fit
    """
    res = []
    for i in range(len(G)):
        res.append(
            G[i] - surrModel(params, T[i], R[i], kH[i], c[i], p[i])
        )
    return res

# Load results of detailed simulation
infilename = './results/outputs_GR.out'
infile = open(infilename, 'r')
G1_exact, G2_exact, T, R, kH1, kH2, c1, c2, p1, p2 = loadtxt(
    infile, skiprows=1, unpack=True)  # TODO: correct for Ng>1
infile.close()

# Create connections to database
url = 'mongodb://localhost:27017/'
client = MongoClient(url)

# Fresh start
# This deletes ALL models
# client.test.surrogate_model.drop()

# Just delete the surrogate model
collection = client.test.surrogate_model
collection.remove({'_id': 'bubbleGrowth1'})
collection.remove({'_id': 'bubbleGrowth2'})

f = CFunction(
    Ccode='''
#include "modena.h"
#include <stdio.h>
#include <stdlib.h>
#include "math.h"

void bblgr_SM
(
    const modena_model_t* model,
    const double* inputs,
    double *outputs
)
{
    {% block variables %}{% endblock %}

    const double alpha = parameters[0];
    const double beta = parameters[1];
    const double gamma = parameters[2];

    double kl,G;
    const double Rg = 8.31446218;
    const double pi = 3.14159265358;

    //initial bubble and shell size are hardcoded
    double h=pow(pow(27*5e-7,3)+pow(R,3)-pow(5e-7,3),1.0/3.0)-R;
    kl=alpha;
    //kl=alpha*pow(R,beta);
    //kl=alpha*pow(c,beta);
    //kl=alpha*pow(R,beta)*pow(c,gamma);
    //kl=alpha*pow(h,beta);

    G=4*pi*R*R*kl*(c-kH*p);
    outputs[0] = G;
}
''',
    # These are global bounds for the function
    inputs={
        'T': {'min': -9e99, 'max': 9e99 },
        'R': {'min': -9e99, 'max': 9e99 },
        'kH': {'min': -9e99, 'max': 9e99 },
        'c': {'min': -9e99, 'max': 9e99 },
        'p': {'min': -9e99, 'max': 9e99 },
    },
    outputs={
        'G': {'min': -9e99, 'max': 9e99, 'argPos': 0},
    },
    parameters={
        'param1': {'min': -1e99, 'max': 1e99, 'argPos': 0},
        'param2': {'min': -1e99, 'max': 1e99, 'argPos': 1},
        'param3': {'min': -1e99, 'max': 1e99, 'argPos': 2},
    },
)

m = ForwardMappingModel(
    _id='bubbleGrowth1',
    surrogateFunction=f,
    substituteModels=[],
    parameters=[1.0, 1.0, 1.0],
    inputs={
        'T': {'min': -9e99, 'max': 9e99},
        'R': {'min': -9e99, 'max': 9e99},
        'kH': {'min': -9e99, 'max': 9e99},
        'c': {'min': -9e99, 'max': 9e99},
        'p': {'min': -9e99, 'max': 9e99},
    },
    outputs={
        'G': {'min': -9e99, 'max': 9e99},
    },
)

m = ForwardMappingModel(
    _id='bubbleGrowth2',
    surrogateFunction=f,
    substituteModels=[],
    parameters=[1.0, 1.0, 1.0],
)

# Instantiate surrogate model
modelInLibrary = collection.find_one({"_id": 'bubbleGrowth1'})

modelFunction = client.test.surrogate_function.find_one(
    {"_id": str(modelInLibrary['surrogateFunction'])})

model = SurrogateModel.load('bubbleGrowth1')

# Fit the data
fittedParams1, ierr = leastsq(residual, array(
    [1, 1, 1]), args=(T, R, kH1, c1, p1, G1_exact),xtol=1e-15)
print 'fitted parameters: ', fittedParams1

# a = leastsq(residual, array(
#         [1, 1, 1]), args=(T, R, kH1, c1, p1, G1_exact), full_output=1)
# print a
# Update the model
collection.update(
    {'_id': 'bubbleGrowth1'},
    {
        '$set':
        {
            'parameters': fittedParams1.tolist(),
        }
    }
)

# Instantiate surrogate model
modelInLibrary = collection.find_one({"_id": 'bubbleGrowth2'})
modelFunction = client.test.surrogate_function.find_one(
    {"_id": str(modelInLibrary['surrogateFunction'])})
model = SurrogateModel.load('bubbleGrowth2')

# Fit the data
fittedParams2, ierr = leastsq(residual, array(
    [1, 1, 1]), args=(T, R, kH2, c2, p2, G2_exact),xtol=1e-15)
print 'fitted parameters: ', fittedParams2

# Update the model
collection.update(
    {'_id': 'bubbleGrowth2'},
    {
        '$set':
        {
            'parameters': fittedParams2.tolist(),
        }
    }
)

# Calculate growth rate by surrogate model
G1 = []
model = SurrogateModel.load('bubbleGrowth1')
for i, Te in enumerate(T):
    G1.append(surrModel(fittedParams1, T[i], R[i], kH1[i], c1[i], p1[i]))

G2 = []
model = SurrogateModel.load('bubbleGrowth2')
for i, Te in enumerate(T):
    G2.append(surrModel(fittedParams2, T[i], R[i], kH2[i], c2[i], p2[i]))

f = open('./results/outputs_sGR.out', 'w')
for i, Ge in enumerate(G1):
    f.write('{0:.8e}  {1:.8e}\n'.format(G1[i], G2[i]))
f.close()

